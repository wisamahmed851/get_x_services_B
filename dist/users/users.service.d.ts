import { Repository } from 'typeorm';
import { User } from './entity/user.entity';
import { UserDetails } from './entity/user_details.entity';
import { CreateUserDto, UpdateUserDto } from './dtos/users.dto';
import { UserDetailsDto } from './dtos/user_details.dto';
import { Role } from 'src/roles/entity/roles.entity';
import { UserRole } from 'src/assig-roles-user/entity/user-role.entity';
import { City } from 'src/city/entity/city.entity';
import { Zone } from 'src/zone/entity/zone.entity';
export declare class UsersService {
    private readonly userRepository;
    private readonly userDetailsRepository;
    private roleRepo;
    private userRoleRepo;
    private cityRepo;
    private zoneRepo;
    constructor(userRepository: Repository<User>, userDetailsRepository: Repository<UserDetails>, roleRepo: Repository<Role>, userRoleRepo: Repository<UserRole>, cityRepo: Repository<City>, zoneRepo: Repository<Zone>);
    storeUser(dto: CreateUserDto): Promise<{
        success: boolean;
        message: string;
        data: User;
    }>;
    idnex(): Promise<{
        success: boolean;
        message: string;
        data: {
            id: number;
            name: string;
            email: string;
            phone: string;
            address: string;
            gender: string;
            street: string;
            district: string;
            image: string;
            location: string;
            city_id: number;
            city: City;
            zone_id: number;
            zone: Zone;
            status: number;
            isVarified: number;
            isOnline: number;
            created_at: string;
            updated_at: string;
            userDetails: UserDetails;
            refresh_token: string;
            fcm_token: string;
            userRoles: UserRole[];
            providerCategories: import("../provider-category/entity/provider-category.entity").ProviderCategory[];
        }[];
    }>;
    findOne(id: number): Promise<{
        success: boolean;
        message: string;
        data: {
            id: number;
            name: string;
            email: string;
            phone: string;
            address: string;
            gender: string;
            street: string;
            district: string;
            image: string;
            location: string;
            city_id: number;
            city: City;
            zone_id: number;
            zone: Zone;
            status: number;
            isVarified: number;
            isOnline: number;
            created_at: string;
            updated_at: string;
            userDetails: UserDetails;
            refresh_token: string;
            fcm_token: string;
            userRoles: UserRole[];
            providerCategories: import("../provider-category/entity/provider-category.entity").ProviderCategory[];
        };
    }>;
    findOnByEmail(email: string): Promise<{
        success: boolean;
        message: string;
        data: {
            id: number;
            name: string;
            email: string;
            phone: string;
            address: string;
            gender: string;
            street: string;
            district: string;
            image: string;
            location: string;
            city_id: number;
            city: City;
            zone_id: number;
            zone: Zone;
            status: number;
            isVarified: number;
            isOnline: number;
            created_at: string;
            updated_at: string;
            userDetails: UserDetails;
            refresh_token: string;
            fcm_token: string;
            userRoles: UserRole[];
            providerCategories: import("../provider-category/entity/provider-category.entity").ProviderCategory[];
        };
    }>;
    updateUser(id: number, dto: UpdateUserDto): Promise<{
        success: boolean;
        message: string;
        data: {
            id: number;
            name: string;
            email: string;
            phone: string;
            address: string;
            gender: string;
            street: string;
            district: string;
            image: string;
            location: string;
            city_id: number;
            city: City;
            zone_id: number;
            zone: Zone;
            status: number;
            isVarified: number;
            isOnline: number;
            created_at: string;
            updated_at: string;
            userDetails: UserDetails;
            refresh_token: string;
            fcm_token: string;
            userRoles: UserRole[];
            providerCategories: import("../provider-category/entity/provider-category.entity").ProviderCategory[];
        };
    }>;
    statusUpdate(id: number): Promise<{
        success: boolean;
        message: string;
        data: {
            id: number;
            name: string;
            email: string;
            phone: string;
            address: string;
            gender: string;
            street: string;
            district: string;
            image: string;
            location: string;
            city_id: number;
            city: City;
            zone_id: number;
            zone: Zone;
            status: number;
            isVarified: number;
            isOnline: number;
            created_at: string;
            updated_at: string;
            userDetails: UserDetails;
            refresh_token: string;
            fcm_token: string;
            userRoles: UserRole[];
            providerCategories: import("../provider-category/entity/provider-category.entity").ProviderCategory[];
        };
    }>;
    create_user_details(dto: UserDetailsDto, user: User): Promise<{
        success: boolean;
        message: string;
        data: UserDetails;
    }>;
    private handleUnknown;
}
